apiVersion: failk8s.dev/v1alpha1
kind: SecretCopierConfig
metadata:
  name: petclinic
spec:
  rules:
  - sourceSecret:
      name: registry-creds
      namespace: tanzu-developer
    targetNamespaces:
      labelSelector:
        matchLabels:
          inject-secret: "yes"
---
kind: Namespace
apiVersion: v1
metadata:
  name: petclinic-pipeline
  labels:
    inject-secret: "yes"
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: triggers-sa
  namespace: petclinic-pipeline
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: tekton-triggers-github-minimal
  namespace: petclinic-pipeline
rules:
- apiGroups:
  - triggers.tekton.dev
  resources:
  - eventlisteners
  - triggerbindings
  - triggertemplates
  verbs:
  - get
- apiGroups:
  - ""
  resources:
  - configmaps
  - secrets
  - serviceaccounts
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - tekton.dev
  resources:
  - pipelineruns
  - pipelineresources
  - taskruns
  verbs:
  - create
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: tekton-triggers-github-binding
  namespace: petclinic-pipeline
subjects:
- kind: ServiceAccount
  name: triggers-sa
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: tekton-triggers-github-minimal
---
apiVersion: triggers.tekton.dev/v1alpha1
kind: TriggerTemplate
metadata:
  name: github-template
  namespace: petclinic-pipeline
spec:
  params:
  - name: gitrevision
  - name: gitrepositoryurl
  resourcetemplates:
  - apiVersion: tekton.dev/v1beta1
    kind: PipelineRun
    metadata:
      generateName: petclinic-native-cicd-
    spec:
      pipelineRef:
        name: petclinic-native-cicd
      params:
      - name: BUILDER_IMAGE
        value: gcr.io/paketo-buildpacks/builder:base
      resources:
      - name: source
        resourceSpec:
          type: git
          params:
          - name: revision
            value: $(params.gitrevision)
          - name: url
            value: $(tt.params.gitrepositoryurl)
      - name: image
        resourceRef:
          name: petclinic-image
      serviceAccountName: petclinic
---
apiVersion: triggers.tekton.dev/v1alpha1
kind: TriggerBinding
metadata:
  name: github-binding
  namespace: petclinic-pipeline
spec:
  params:
  - name: gitrevision
    value: $(body.pull_request.head.sha)
  - name: gitrepositoryurl
    value: $(body.repository.clone_url)
---
apiVersion: triggers.tekton.dev/v1alpha1
kind: EventListener
metadata:
  name: github-listener-interceptor
  namespace: petclinic-pipeline
spec:
  serviceAccountName: triggers-sa
  triggers:
  - name: github-listener
    interceptors:
    - cel:
        filter: body.action in ['opened', 'synchronize', 'reopened']
    bindings:
    - ref: github-binding
    template:
      name: github-template
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: el-github-listener-interceptor
  namespace: petclinic-pipeline
spec:
  rules:
  - host: petclinic-native-cicd.apps.tanzu-devs.com
    http:
      paths:
      - backend:
          serviceName: el-github-listener-interceptor
          servicePort: 8080
        path: /
  tls:
  - hosts:
    - petclinic-native-cicd.apps.tanzu-devs.com
    secretName: wildcard
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: petclinic
  namespace: petclinic-pipeline
secrets:
- name: registry-creds
imagePullSecrets:
- name: registry-creds
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: create-dev-environment
rules:
- apiGroups:
  - ""
  resources:
  - namespaces
  - serviceaccounts
  - configmaps
  - services
  - secrets
  - persistentvolumeclaims
  verbs:
  - get
  - create
  - update
  - patch
- apiGroups:
  - serving.knative.dev
  resources:
  - services
  verbs:
  - get
  - create
  - update
- apiGroups:
  - failk8s.dev
  resources:
  - secretcopierconfigs
  verbs:
  - get
  - create
  - update
- apiGroups:
  - extensions
  resources:
  - ingresses
  verbs:
  - get
  - create
  - update
- apiGroups:
  - apps
  resources:
  - deployments
  verbs:
  - get
  - create
  - update
- apiGroups:
  - rbac.authorization.k8s.io
  resources:
  - roles
  - rolebindings
  verbs:
  - get
  - create
  - update
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - list
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: create-dev-environment-binding
subjects:
- kind: ServiceAccount
  name: petclinic
  namespace: petclinic-pipeline
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: create-dev-environment
---
apiVersion: tekton.dev/v1alpha1
kind: PipelineResource
metadata:
  name: petclinic-image
  namespace: petclinic-pipeline
spec:
  type: image
  params:
  - name: url
    value: registry.tanzu-devs.com/failk8s/petclinic:latest
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: buildpacks
  namespace: petclinic-pipeline
spec:
  params:
  - name: BUILDER_IMAGE
    description: The image on which builds will run (must include v3 lifecycle and compatible buildpacks).
  - name: CACHE
    description: The name of the persistent app cache volume.
    default: empty-dir
  - name: PLATFORM_DIR
    description: The name of the platform directory.
    default: empty-dir
  - name: USER_ID
    description: The user ID of the builder image user.
    default: "1000"
  - name: GROUP_ID
    description: The group ID of the builder image user.
    default: "1000"
  - name: PROCESS_TYPE
    description: The default process type to set on the image.
    default: web
  - name: SOURCE_SUBPATH
    description: A subpath within the `source` input where the source to build is located.
    default: ""
  resources:
    inputs:
    - name: source
      type: git
    outputs:
    - name: image
      type: image
  stepTemplate:
    env:
    - name: CNB_PLATFORM_API
      value: "0.3"
  steps:
  - name: prepare
    image: alpine
    imagePullPolicy: Always
    command:
    - /bin/sh
    args:
    - -c
    - |
      chown -R "$(params.USER_ID):$(params.GROUP_ID)" "/tekton/home" && chown -R "$(params.USER_ID):$(params.GROUP_ID)" "/layers" && chown -R "$(params.USER_ID):$(params.GROUP_ID)" "/cache" && chown -R "$(params.USER_ID):$(params.GROUP_ID)" "$(resources.inputs.source.path)"
    volumeMounts:
    - name: layers-dir
      mountPath: /layers
    - name: $(params.CACHE)
      mountPath: /cache
    securityContext:
      privileged: true
  - name: detect
    image: $(params.BUILDER_IMAGE)
    imagePullPolicy: Always
    command:
    - /cnb/lifecycle/detector
    args:
    - -app=$(resources.inputs.source.path)/$(params.SOURCE_SUBPATH)
    - -group=/layers/group.toml
    - -plan=/layers/plan.toml
    volumeMounts:
    - name: layers-dir
      mountPath: /layers
    - name: $(params.PLATFORM_DIR)
      mountPath: /platform
  - name: analyze
    image: $(params.BUILDER_IMAGE)
    imagePullPolicy: Always
    command:
    - /cnb/lifecycle/analyzer
    args:
    - -layers=/layers
    - -group=/layers/group.toml
    - -cache-dir=/cache
    - $(resources.outputs.image.url)
    volumeMounts:
    - name: $(params.CACHE)
      mountPath: /cache
    - name: layers-dir
      mountPath: /layers
  - name: restore
    image: $(params.BUILDER_IMAGE)
    imagePullPolicy: Always
    command:
    - /cnb/lifecycle/restorer
    args:
    - -group=/layers/group.toml
    - -layers=/layers
    - -cache-dir=/cache
    volumeMounts:
    - name: $(params.CACHE)
      mountPath: /cache
    - name: layers-dir
      mountPath: /layers
  - name: build
    image: $(params.BUILDER_IMAGE)
    imagePullPolicy: Always
    command:
    - /cnb/lifecycle/builder
    args:
    - -app=$(resources.inputs.source.path)/$(params.SOURCE_SUBPATH)
    - -layers=/layers
    - -group=/layers/group.toml
    - -plan=/layers/plan.toml
    volumeMounts:
    - name: layers-dir
      mountPath: /layers
    - name: $(params.PLATFORM_DIR)
      mountPath: /platform
  - name: export
    image: $(params.BUILDER_IMAGE)
    imagePullPolicy: Always
    command:
    - /cnb/lifecycle/exporter
    args:
    - -app=$(resources.inputs.source.path)/$(params.SOURCE_SUBPATH)
    - -layers=/layers
    - -group=/layers/group.toml
    - -cache-dir=/cache
    - -process-type=$(params.PROCESS_TYPE)
    - $(resources.outputs.image.url)
    volumeMounts:
    - name: layers-dir
      mountPath: /layers
    - name: $(params.CACHE)
      mountPath: /cache
  volumes:
  - name: empty-dir
    emptyDir: {}
  - name: layers-dir
    emptyDir: {}
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: deploy-knative-service
  namespace: petclinic-pipeline
spec:
  resources:
    inputs:
    - name: source
      type: git
    - name: image
      type: image
  results:
  - name: namespace
    description: The name of the ephemeral namespace created for testing the PR
  steps:
  - name: kubectl-create-ephemeral-ns
    image: bitnami/kubectl
    script: |
      #!/usr/bin/env bash
      kubectl create -f "$(resources.inputs.source.path)/cicd/ephemeral-ns/k8s/namespace.yaml" -o jsonpath='{ .metadata.name }' | tee $(results.namespace.path)
  - name: kubectl-create-ephemeral-ns-resources
    image: bitnami/kubectl
    script: |
      #!/usr/bin/env bash
      ns=$(cat "$(results.namespace.path)")
      kubectl -n ${ns} apply -f $(resources.inputs.source.path)/cicd/ephemeral-ns/k8s/rbac.yaml
  - name: kubectl-create-database
    image: bitnami/kubectl
    script: |
      #!/usr/bin/env bash
      ns=$(cat "$(results.namespace.path)")
      kubectl -n ${ns} apply -f $(resources.inputs.source.path)/cicd/ephemeral-ns/k8s/mysql.yaml
  - name: ytt-kapp-create-ksvc
    image: k14s/image:kbld-rand-1592942790507001000-1148625018150
    script: |
      #!/usr/bin/env bash
      ns=$(cat "$(results.namespace.path)")
      ytt -f $(resources.inputs.source.path)/cicd/ephemeral-ns/k8s/ksvc.yaml -f $(resources.inputs.source.path)/cicd/ephemeral-ns/overlay/v.yaml --data-value-yaml built_image=$(resources.inputs.image.url) -f $(resources.inputs.source.path)/cicd/ephemeral-ns/overlay/ksvc-overlay.yaml | kapp deploy -a petclinic-ksvc -n ${ns} -y -f -
  - name: kubectl-get-ksvc-url
    image: bitnami/kubectl
    script: |
      #!/usr/bin/env bash
      ns=$(cat "$(results.namespace.path)")
      kubectl get ksvc petclinic -n ${ns} -o jsonpath='{.status.url}'
---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: petclinic-native-cicd
  namespace: petclinic-pipeline
spec:
  params:
  - name: BUILDER_IMAGE
    description: The image on which builds will run (must include v3 lifecycle and compatible buildpacks).
    type: string
  - name: SOURCE_SUBPATH
    description: A subpath within the `source` input where the source to build is located.
    type: string
  resources:
  - name: source
    type: git
  - name: image
    type: image
  tasks:
  - name: build
    taskRef:
      name: buildpacks
    params:
    - name: BUILDER_IMAGE
      value: $(params.BUILDER_IMAGE)
    resources:
      inputs:
      - name: source
        resource: source
      outputs:
      - name: image
        resource: image
  - name: deploy
    taskRef:
      name: deploy-knative-service
    resources:
      inputs:
      - name: source
        resource: source
      - name: image
        resource: image
        from:
        - build
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: privileged-triggers
  namespace: petclinic-pipeline
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: vmware-system-tmc-psp-privileged
subjects:
- kind: ServiceAccount
  name: triggers-sa
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: privileged-pipeline
  namespace: petclinic-pipeline
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: vmware-system-tmc-psp-privileged
subjects:
- kind: ServiceAccount
  name: petclinic
